openapi: 3.0.3
info:
  title: User Manager API
  version: 1.0.0
  description: |
    REST API for authentication, user management, and user file management.

servers:
  - url: http://localhost:8080/api/v1

tags:
  - name: auth
    description: Authentication
  - name: users
    description: User management
  - name: user-files
    description: User files management

paths:
  /auth/login:
    post:
      tags: [auth]
      summary: Login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        '400':
          description: Invalid JSON or malformed request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error while fetching user or generating token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      tags: [users]
      summary: Get list of users (with pagination)
      operationId: listUsers
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '400':
          description: Invalid query parameters (page)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to fetch users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: [users]
      summary: Create a new user
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body (validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized / invalid JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error while creating user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user_id}:
    get:
      tags: [users]
      summary: Get user by UUID
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user_id (must be a valid UUID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to fetch user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags: [users]
      summary: Update user by UUID
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid data (UUID or validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized / invalid JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [users]
      summary: Delete user by UUID
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '204':
          description: Deleted successfully (no content)
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized / invalid JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to delete user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{user_id}/files:
    get:
      tags: [user-files]
      summary: Get userâ€™s files (with pagination)
      operationId: listUserFiles
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFilesListResponse'
        '400':
          description: Invalid parameters (UUID/page)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to fetch files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags: [user-files]
      summary: Upload a file for a user
      operationId: createUserFile
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload (max 10 MB).
      responses:
        '201':
          description: File created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFile'
        '400':
          description: Invalid file or UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized / invalid JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '413':
          description: File too large or empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to create file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [user-files]
      summary: Delete all files for a user
      operationId: deleteUserFiles
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '204':
          description: Deleted successfully (no content)
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized / invalid JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to delete user files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    UserIdParam:
      in: path
      name: user_id
      required: true
      description: User UUID.
      schema:
        type: string
        format: uuid

  schemas:
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    AuthTokenResponse:
      type: object
      required: [access_token, token_type]
      properties:
        access_token:
          type: string
          description: JWT access token
        token_type:
          type: string
          example: Bearer

    UserRequest:
      type: object
      required: [email, name, lastname, birth_date, phone]
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        lastname:
          type: string
        birth_date:
          type: string
          format: date
        phone:
          type: string

    User:
      type: object
      required: [uuid, email, name, lastname, birth_date, phone]
      properties:
        uuid:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        lastname:
          type: string
        birth_date:
          type: string
          format: date
        phone:
          type: string

    UsersListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'

    UserFile:
      type: object
      description: Representation of a user file (response DTO).
      properties:
        uuid:
          type: string
          format: uuid
        file_name:
          type: string
        mime_type:
          type: string
        size_bytes:
          type: integer
          format: int64
          minimum: 0
        download_url:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time

    UserFilesListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserFile'

    Error:
      type: object
      properties:
        error:
          type: string
        details:
          description: Additional error details
          oneOf:
            - type: string
            - type: object
            - type: array

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
      example:
        error: invalid request body
        details:
          email: email is required
          name: name must contain only letters
          phone: invalid phone format
